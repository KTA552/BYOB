{
  "version": 3,
  "sources": ["../src/index.ts", "../src/calc-text-width.ts", "../src/color-presets.ts"],
  "sourcesContent": ["export { Verdana110 as calcWidth } from './calc-text-width'\r\nimport { Verdana110 as calcWidth } from './calc-text-width'\r\nimport colorPresets from './color-presets'\r\n\r\ntype StyleOption = 'flat' | 'classic'\r\n\r\ninterface BadgenOptions {\r\n  status: string;\r\n  subject?: string;\r\n  color?: string;\r\n  label?: string;\r\n  labelColor?: string\r\n  style?: StyleOption;\r\n  icon?: string;\r\n  iconWidth?: number;\r\n  scale?: number\r\n}\r\n\r\nexport function badgen ({\r\n  label,\r\n  subject,\r\n  status,\r\n  color = 'blue',\r\n  style,\r\n  icon,\r\n  iconWidth = 13,\r\n  labelColor = '555',\r\n  scale = 1\r\n}: BadgenOptions) {\r\n  typeAssert(typeof status === 'string', '<status> must be string')\r\n\r\n  label = label === undefined ? subject : label // subject is deprecated\r\n  if (!label && !icon) {\r\n    return bare({ status, color, style, scale })\r\n  }\r\n\r\n  color = colorPresets[color] || color\r\n  labelColor = colorPresets[labelColor] || labelColor\r\n  iconWidth = iconWidth * 10\r\n\r\n  const iconSpanWidth = icon ? (label.length ? iconWidth + 30 : iconWidth - 18) : 0\r\n  const sbTextStart = icon ? (iconSpanWidth + 50) : 50\r\n  const sbTextWidth = calcWidth(label)\r\n  const stTextWidth = calcWidth(status)\r\n  const sbRectWidth = sbTextWidth + 100 + iconSpanWidth\r\n  const stRectWidth = stTextWidth + 100\r\n  const width = sbRectWidth + stRectWidth\r\n  const xlink = icon ? ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"' : ''\r\n\r\n  label = sanitize(label)\r\n  status = sanitize(status)\r\n  color = sanitize(color)\r\n  labelColor = sanitize(labelColor)\r\n  icon = icon ? sanitize(icon) : icon\r\n  const accessibleText = createAccessibleText({label, status})\r\n\r\n  if (style === 'flat') {\r\n    return `<svg width=\"${scale * width / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${width} 200\" xmlns=\"http://www.w3.org/2000/svg\"${xlink} role=\"img\" aria-label=\"${accessibleText}\">\r\n  <title>${accessibleText}</title>\r\n  <g>\r\n    <rect fill=\"#${labelColor}\" width=\"${sbRectWidth}\" height=\"200\"/>\r\n    <rect fill=\"#${color}\" x=\"${sbRectWidth}\" width=\"${stRectWidth}\" height=\"200\"/>\r\n  </g>\r\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\r\n    <text x=\"${sbTextStart + 10}\" y=\"148\" textLength=\"${sbTextWidth}\" fill=\"#000\" opacity=\"0.1\">${label}</text>\r\n    <text x=\"${sbTextStart}\" y=\"138\" textLength=\"${sbTextWidth}\">${label}</text>\r\n    <text x=\"${sbRectWidth + 55}\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.1\">${status}</text>\r\n    <text x=\"${sbRectWidth + 45}\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\r\n  </g>\r\n  ${icon ? `<image x=\"40\" y=\"35\" width=\"${iconWidth}\" height=\"132\" xlink:href=\"${icon}\"/>` : ''}\r\n</svg>`\r\n  }\r\n\r\n  return `<svg width=\"${scale * width / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${width} 200\" xmlns=\"http://www.w3.org/2000/svg\"${xlink} role=\"img\" aria-label=\"${accessibleText}\">\r\n  <title>${accessibleText}</title>\r\n  <linearGradient id=\"a\" x2=\"0\" y2=\"100%\">\r\n    <stop offset=\"0\" stop-opacity=\".1\" stop-color=\"#EEE\"/>\r\n    <stop offset=\"1\" stop-opacity=\".1\"/>\r\n  </linearGradient>\r\n  <mask id=\"m\"><rect width=\"${width}\" height=\"200\" rx=\"30\" fill=\"#FFF\"/></mask>\r\n  <g mask=\"url(#m)\">\r\n    <rect width=\"${sbRectWidth}\" height=\"200\" fill=\"#${labelColor}\"/>\r\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"#${color}\" x=\"${sbRectWidth}\"/>\r\n    <rect width=\"${width}\" height=\"200\" fill=\"url(#a)\"/>\r\n  </g>\r\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\r\n    <text x=\"${sbTextStart + 10}\" y=\"148\" textLength=\"${sbTextWidth}\" fill=\"#000\" opacity=\"0.25\">${label}</text>\r\n    <text x=\"${sbTextStart}\" y=\"138\" textLength=\"${sbTextWidth}\">${label}</text>\r\n    <text x=\"${sbRectWidth + 55}\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.25\">${status}</text>\r\n    <text x=\"${sbRectWidth + 45}\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\r\n  </g>\r\n  ${icon ? `<image x=\"40\" y=\"35\" width=\"${iconWidth}\" height=\"130\" xlink:href=\"${icon}\"/>` : ''}\r\n</svg>`\r\n}\r\n\r\nfunction bare ({ status, color, style, scale }) {\r\n  typeAssert(typeof status === 'string', '<status> must be string')\r\n  color = colorPresets[color] || color || colorPresets.blue\r\n\r\n  const stTextWidth = calcWidth(status)\r\n  const stRectWidth = stTextWidth + 115\r\n\r\n  status = sanitize(status)\r\n  color = sanitize(color)\r\n\r\n  if (style === 'flat') {\r\n    return `<svg width=\"${scale * stRectWidth / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${stRectWidth} 200\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" aria-label=\"${status}\">\r\n  <title>${status}</title>\r\n  <g>\r\n    <rect fill=\"#${color}\" x=\"0\" width=\"${stRectWidth}\" height=\"200\"/>\r\n  </g>\r\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\r\n    <text x=\"65\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.1\">${status}</text>\r\n    <text x=\"55\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\r\n  </g>\r\n</svg>`\r\n  }\r\n\r\n  return `<svg width=\"${scale * stRectWidth / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${stRectWidth} 200\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" aria-label=\"${status}\">\r\n  <title>${status}</title>\r\n  <linearGradient id=\"a\" x2=\"0\" y2=\"100%\">\r\n    <stop offset=\"0\" stop-opacity=\".1\" stop-color=\"#EEE\"/>\r\n    <stop offset=\"1\" stop-opacity=\".1\"/>\r\n  </linearGradient>\r\n  <mask id=\"m\"><rect width=\"${stRectWidth}\" height=\"200\" rx=\"30\" fill=\"#FFF\"/></mask>\r\n  <g mask=\"url(#m)\">\r\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"#${color}\" x=\"0\"/>\r\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"url(#a)\"/>\r\n  </g>\r\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\r\n    <text x=\"65\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.25\">${status}</text>\r\n    <text x=\"55\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\r\n  </g>\r\n</svg>`\r\n}\r\n\r\nfunction sanitize (str: string): string {\r\n  return str\r\n    .replace(/\\u0026/g, '&amp;')\r\n    .replace(/\\u003C/g, '&lt;')\r\n    .replace(/\\u003E/g, '&gt;')\r\n    .replace(/\\u0022/g, '&quot;')\r\n    .replace(/\\u0027/g, '&apos;')\r\n}\r\n\r\ninterface AccessibleTextProps {\r\n  status: string;\r\n  label?: string;\r\n}\r\n\r\nfunction createAccessibleText({label, status}: AccessibleTextProps): string {\r\n  const labelPrefix = label ? `${label}: ` : '';\r\n  return labelPrefix + status;\r\n}\r\n\r\nfunction typeAssert (assertion: boolean, message: string): void {\r\n  if (!assertion) throw new TypeError(message)\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    badgen: typeof badgen;\r\n  }\r\n}\r\n\r\nif (typeof window === 'object') {\r\n  window.badgen = badgen\r\n}\r\n", "// import widthsVerdana110 from './widths-verdana-110.json'\r\n// @ts-ignore\r\nconst widthsVerdana110 = require('./widths-verdana-110.json')\r\n\r\nconst calcWidth = (charWidthTable) => {\r\n  const fallbackWidth = charWidthTable[64] // Width as \"@\" for overflows\r\n\r\n  return ([...text]) => {\r\n    let total = 0\r\n    let charWidth = 0\r\n    let i = text.length\r\n    while (i--) {\r\n      charWidth = charWidthTable[text[i].charCodeAt()]\r\n      total += charWidth === undefined ? fallbackWidth : charWidth\r\n    }\r\n    return total\r\n  }\r\n}\r\n\r\nexport const Verdana110 = calcWidth(widthsVerdana110)\r\n", "export default {\r\n  green: '3C1',\r\n  blue: '08C',\r\n  red: 'E43',\r\n  yellow: 'DB1',\r\n  orange: 'F73',\r\n  purple: '94E',\r\n  pink: 'E5B',\r\n  grey: '999',\r\n  gray: '999',\r\n  cyan: '1BC',\r\n  black: '2A2A2A'\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
